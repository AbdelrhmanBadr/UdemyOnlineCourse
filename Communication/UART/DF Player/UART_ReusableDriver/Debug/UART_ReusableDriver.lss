
UART_ReusableDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000944  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000944  000009d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080006a  0080006a  000009e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a2f  00000000  00000000  00000ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000423  00000000  00000000  000014f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d8  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000274  00000000  00000000  00001dec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e0  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006fc  00000000  00000000  00002740  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002e3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_13>
  38:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_14>
  3c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_15>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	32 02       	muls	r19, r18
  56:	34 02       	muls	r19, r20
  58:	36 02       	muls	r19, r22
  5a:	38 02       	muls	r19, r24
  5c:	3a 02       	muls	r19, r26
  5e:	3c 02       	muls	r19, r28
  60:	3e 02       	muls	r19, r30

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e4 e4       	ldi	r30, 0x44	; 68
  76:	f9 e0       	ldi	r31, 0x09	; 9
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	aa 36       	cpi	r26, 0x6A	; 106
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	aa e6       	ldi	r26, 0x6A	; 106
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	ac 37       	cpi	r26, 0x7C	; 124
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 8f 02 	call	0x51e	; 0x51e <main>
  98:	0c 94 a0 04 	jmp	0x940	; 0x940 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <SendCommandFrame>:

unsigned char Mp3_DefaultCommand[MP3_CMD_SIZE] = {MP3_STARTBYTE,MP3_VERSION,6,0,MP3_NOFEEDBACK,0,0,0,0,MP3_ENDBYTE};


static void SendCommandFrame(void)
{
  a0:	cf 92       	push	r12
  a2:	df 92       	push	r13
  a4:	ef 92       	push	r14
  a6:	ff 92       	push	r15
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	01 e0       	ldi	r16, 0x01	; 1
  b2:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char i =0;
	unsigned short CheckSum = 0;
	unsigned short Add_Frame = 0;
  b4:	c0 e0       	ldi	r28, 0x00	; 0
  b6:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else if ( i == 7)
		{
		  	CheckSum = 0xFFFF  -  Add_Frame  + 1 ;
			
			Mp3_DefaultCommand[7] = CheckSum >> 8 ;
  b8:	0f 2e       	mov	r0, r31
  ba:	f7 e6       	ldi	r31, 0x67	; 103
  bc:	ef 2e       	mov	r14, r31
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	ff 2e       	mov	r15, r31
  c2:	f0 2d       	mov	r31, r0
			Mp3_DefaultCommand[8] = (unsigned char) CheckSum;
  c4:	0f 2e       	mov	r0, r31
  c6:	f8 e6       	ldi	r31, 0x68	; 104
  c8:	cf 2e       	mov	r12, r31
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	df 2e       	mov	r13, r31
  ce:	f0 2d       	mov	r31, r0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <SendCommandFrame+0x36>
  d2:	1f 5f       	subi	r17, 0xFF	; 255
  d4:	0f 5f       	subi	r16, 0xFF	; 255
  d6:	8e ef       	ldi	r24, 0xFE	; 254
  d8:	80 0f       	add	r24, r16
	unsigned short CheckSum = 0;
	unsigned short Add_Frame = 0;
	for(i=0;i<10;i++)
	{
		
		if ( i > 0 && i < 7 )
  da:	86 30       	cpi	r24, 0x06	; 6
  dc:	40 f4       	brcc	.+16     	; 0xee <SendCommandFrame+0x4e>
		{
			Add_Frame += Mp3_DefaultCommand[i];
  de:	e1 2f       	mov	r30, r17
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	e0 5a       	subi	r30, 0xA0	; 160
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	80 81       	ld	r24, Z
  e8:	c8 0f       	add	r28, r24
  ea:	d1 1d       	adc	r29, r1
  ec:	13 c0       	rjmp	.+38     	; 0x114 <SendCommandFrame+0x74>
		}
		else if ( i == 7)
  ee:	17 30       	cpi	r17, 0x07	; 7
  f0:	89 f4       	brne	.+34     	; 0x114 <SendCommandFrame+0x74>
		{
		  	CheckSum = 0xFFFF  -  Add_Frame  + 1 ;
  f2:	88 27       	eor	r24, r24
  f4:	99 27       	eor	r25, r25
  f6:	8c 1b       	sub	r24, r28
  f8:	9d 0b       	sbc	r25, r29
			
			Mp3_DefaultCommand[7] = CheckSum >> 8 ;
  fa:	f7 01       	movw	r30, r14
  fc:	90 83       	st	Z, r25
			Mp3_DefaultCommand[8] = (unsigned char) CheckSum;
  fe:	f6 01       	movw	r30, r12
 100:	80 83       	st	Z, r24
		}
		USART_SendByte_Blocking(Mp3_DefaultCommand[i]);
 102:	e1 2f       	mov	r30, r17
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	e0 5a       	subi	r30, 0xA0	; 160
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	80 81       	ld	r24, Z
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <USART_SendByte_Blocking>
 112:	df cf       	rjmp	.-66     	; 0xd2 <SendCommandFrame+0x32>
 114:	e1 2f       	mov	r30, r17
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	e0 5a       	subi	r30, 0xA0	; 160
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	80 81       	ld	r24, Z
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 7f 02 	call	0x4fe	; 0x4fe <USART_SendByte_Blocking>
static void SendCommandFrame(void)
{
	unsigned char i =0;
	unsigned short CheckSum = 0;
	unsigned short Add_Frame = 0;
	for(i=0;i<10;i++)
 124:	0a 30       	cpi	r16, 0x0A	; 10
 126:	a8 f2       	brcs	.-86     	; 0xd2 <SendCommandFrame+0x32>
			Mp3_DefaultCommand[7] = CheckSum >> 8 ;
			Mp3_DefaultCommand[8] = (unsigned char) CheckSum;
		}
		USART_SendByte_Blocking(Mp3_DefaultCommand[i]);
	}
}
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	1f 91       	pop	r17
 12e:	0f 91       	pop	r16
 130:	ff 90       	pop	r15
 132:	ef 90       	pop	r14
 134:	df 90       	pop	r13
 136:	cf 90       	pop	r12
 138:	08 95       	ret

0000013a <Mp3_Init>:

void Mp3_Init(void)
{
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
	/* Configure USART During RunTime */
	UART0.BaudRate = 9600;
 13e:	80 e8       	ldi	r24, 0x80	; 128
 140:	95 e2       	ldi	r25, 0x25	; 37
 142:	a0 e0       	ldi	r26, 0x00	; 0
 144:	b0 e0       	ldi	r27, 0x00	; 0
 146:	80 93 71 00 	sts	0x0071, r24
 14a:	90 93 72 00 	sts	0x0072, r25
 14e:	a0 93 73 00 	sts	0x0073, r26
 152:	b0 93 74 00 	sts	0x0074, r27
	UART0.EnableMode = USART_Tx_Only;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 6a 00 	sts	0x006A, r24
	UART0.CommunicationMode = USART_Async_DoubleSpeed;
 15c:	80 93 6b 00 	sts	0x006B, r24
	UART0.CommunicationTerminal = USART_SingleProcessor;
 160:	10 92 6c 00 	sts	0x006C, r1
	UART0.ControlFrame = USART_ParityDisable_1Stop;
 164:	10 92 6f 00 	sts	0x006F, r1
	UART0.DataFrame = USART_8bitData;
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	80 93 6e 00 	sts	0x006E, r24
	UART0.InterruptSource = USART_InterruptDisable;
 16e:	10 92 6d 00 	sts	0x006D, r1
	/* Init USART */
	USART_Init();
 172:	0e 94 91 01 	call	0x322	; 0x322 <USART_Init>
	/* MP3 Player ONLINE */
	Mp3_DefaultCommand[3] = MP3_CMD_RESET;
 176:	c3 e6       	ldi	r28, 0x63	; 99
 178:	d0 e0       	ldi	r29, 0x00	; 0
 17a:	8c e0       	ldi	r24, 0x0C	; 12
 17c:	88 83       	st	Y, r24
	SendCommandFrame();
 17e:	0e 94 50 00 	call	0xa0	; 0xa0 <SendCommandFrame>
	/* return To Default Value */
	Mp3_DefaultCommand[3] = 0;
 182:	18 82       	st	Y, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	2f e3       	ldi	r18, 0x3F	; 63
 186:	8d e0       	ldi	r24, 0x0D	; 13
 188:	93 e0       	ldi	r25, 0x03	; 3
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <Mp3_Init+0x50>
 192:	00 c0       	rjmp	.+0      	; 0x194 <Mp3_Init+0x5a>
 194:	00 00       	nop
	/* Delay 1 Sec to make Sure Mp3 Module is Online */
	_delay_ms(1000);
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <Mp3_PlayTrack>:

void Mp3_PlayTrack(unsigned short TrackNumber)
{
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
	Mp3_DefaultCommand[3] = MP3_CMD_PlAYBACK;
 1a8:	0f 2e       	mov	r0, r31
 1aa:	f3 e6       	ldi	r31, 0x63	; 99
 1ac:	ef 2e       	mov	r14, r31
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	ff 2e       	mov	r15, r31
 1b2:	f0 2d       	mov	r31, r0
 1b4:	23 e0       	ldi	r18, 0x03	; 3
 1b6:	f7 01       	movw	r30, r14
 1b8:	20 83       	st	Z, r18
	Mp3_DefaultCommand[5] = TrackNumber >> 8;
 1ba:	05 e6       	ldi	r16, 0x65	; 101
 1bc:	10 e0       	ldi	r17, 0x00	; 0
 1be:	f8 01       	movw	r30, r16
 1c0:	90 83       	st	Z, r25
	Mp3_DefaultCommand[6] = (unsigned char) TrackNumber;
 1c2:	c6 e6       	ldi	r28, 0x66	; 102
 1c4:	d0 e0       	ldi	r29, 0x00	; 0
 1c6:	88 83       	st	Y, r24
	
	SendCommandFrame();
 1c8:	0e 94 50 00 	call	0xa0	; 0xa0 <SendCommandFrame>
	
	Mp3_DefaultCommand[3] = 0;
 1cc:	f7 01       	movw	r30, r14
 1ce:	10 82       	st	Z, r1
	Mp3_DefaultCommand[5] = 0;
 1d0:	f8 01       	movw	r30, r16
 1d2:	10 82       	st	Z, r1
	Mp3_DefaultCommand[6] = 0;
 1d4:	18 82       	st	Y, r1
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	0f 91       	pop	r16
 1de:	ff 90       	pop	r15
 1e0:	ef 90       	pop	r14
 1e2:	08 95       	ret

000001e4 <Mp3_SelectVolume>:
void Mp3_SelectVolume(unsigned short VolumeLevel)
{
 1e4:	ef 92       	push	r14
 1e6:	ff 92       	push	r15
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
		Mp3_DefaultCommand[3] = MP3_CMD_SETVOLUME;
 1f0:	0f 2e       	mov	r0, r31
 1f2:	f3 e6       	ldi	r31, 0x63	; 99
 1f4:	ef 2e       	mov	r14, r31
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	ff 2e       	mov	r15, r31
 1fa:	f0 2d       	mov	r31, r0
 1fc:	26 e0       	ldi	r18, 0x06	; 6
 1fe:	f7 01       	movw	r30, r14
 200:	20 83       	st	Z, r18
		Mp3_DefaultCommand[5] = VolumeLevel >> 8;
 202:	05 e6       	ldi	r16, 0x65	; 101
 204:	10 e0       	ldi	r17, 0x00	; 0
 206:	f8 01       	movw	r30, r16
 208:	90 83       	st	Z, r25
		Mp3_DefaultCommand[6] = (unsigned char) VolumeLevel;
 20a:	c6 e6       	ldi	r28, 0x66	; 102
 20c:	d0 e0       	ldi	r29, 0x00	; 0
 20e:	88 83       	st	Y, r24
		
		SendCommandFrame();
 210:	0e 94 50 00 	call	0xa0	; 0xa0 <SendCommandFrame>
		
		Mp3_DefaultCommand[3] = 0;
 214:	f7 01       	movw	r30, r14
 216:	10 82       	st	Z, r1
		Mp3_DefaultCommand[5] = 0;
 218:	f8 01       	movw	r30, r16
 21a:	10 82       	st	Z, r1
		Mp3_DefaultCommand[6] = 0;
 21c:	18 82       	st	Y, r1
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	08 95       	ret

0000022c <__vector_13>:
									.RXC_InterruptCall  = NULL_PTR,
									.TXC_InterruptCall  = NULL_PTR,
									.UDRE_InterruptCall = NULL_PTR };

ISR(USART_RXC_vect)
{
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	2f 93       	push	r18
 238:	3f 93       	push	r19
 23a:	4f 93       	push	r20
 23c:	5f 93       	push	r21
 23e:	6f 93       	push	r22
 240:	7f 93       	push	r23
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
 246:	af 93       	push	r26
 248:	bf 93       	push	r27
 24a:	ef 93       	push	r30
 24c:	ff 93       	push	r31
	if ( UART0.RXC_InterruptCall != NULL_PTR)
 24e:	e0 91 76 00 	lds	r30, 0x0076
 252:	f0 91 77 00 	lds	r31, 0x0077
 256:	30 97       	sbiw	r30, 0x00	; 0
 258:	09 f0       	breq	.+2      	; 0x25c <__vector_13+0x30>
	{
		UART0.RXC_InterruptCall();
 25a:	09 95       	icall
	else
	{
		// Handle Error Using Error Handling Function
		
	}
}
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <__vector_15>:

ISR(USART_TXC_vect)
{
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	2f 93       	push	r18
 28a:	3f 93       	push	r19
 28c:	4f 93       	push	r20
 28e:	5f 93       	push	r21
 290:	6f 93       	push	r22
 292:	7f 93       	push	r23
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	af 93       	push	r26
 29a:	bf 93       	push	r27
 29c:	ef 93       	push	r30
 29e:	ff 93       	push	r31
	if ( UART0.TXC_InterruptCall != NULL_PTR)
 2a0:	e0 91 78 00 	lds	r30, 0x0078
 2a4:	f0 91 79 00 	lds	r31, 0x0079
 2a8:	30 97       	sbiw	r30, 0x00	; 0
 2aa:	09 f0       	breq	.+2      	; 0x2ae <__vector_15+0x30>
	{
		UART0.TXC_InterruptCall();
 2ac:	09 95       	icall
	else
	{
		// Handle Error Using Error Handling Function
		
	}
}
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	bf 91       	pop	r27
 2b4:	af 91       	pop	r26
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	7f 91       	pop	r23
 2bc:	6f 91       	pop	r22
 2be:	5f 91       	pop	r21
 2c0:	4f 91       	pop	r20
 2c2:	3f 91       	pop	r19
 2c4:	2f 91       	pop	r18
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <__vector_14>:

ISR(USART_UDRE_vect)
{
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
	if ( UART0.UDRE_InterruptCall != NULL_PTR)
 2f2:	e0 91 7a 00 	lds	r30, 0x007A
 2f6:	f0 91 7b 00 	lds	r31, 0x007B
 2fa:	30 97       	sbiw	r30, 0x00	; 0
 2fc:	09 f0       	breq	.+2      	; 0x300 <__vector_14+0x30>
	{
		UART0.UDRE_InterruptCall();
 2fe:	09 95       	icall
	else
	{
		// Handle Error Using Error Handling Function
		
	}
}
 300:	ff 91       	pop	r31
 302:	ef 91       	pop	r30
 304:	bf 91       	pop	r27
 306:	af 91       	pop	r26
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	7f 91       	pop	r23
 30e:	6f 91       	pop	r22
 310:	5f 91       	pop	r21
 312:	4f 91       	pop	r20
 314:	3f 91       	pop	r19
 316:	2f 91       	pop	r18
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <USART_Init>:


void USART_Init(void)
{
 322:	cf 92       	push	r12
 324:	df 92       	push	r13
 326:	ef 92       	push	r14
 328:	ff 92       	push	r15
 32a:	cf 93       	push	r28
	unsigned char UCSRA_Temp=0;
	unsigned char UCSRB_Temp=0;
	unsigned char UCSRC_Temp=0;
	float UBRR_Temp=0;
		
	switch(UART0.EnableMode)
 32c:	80 91 6a 00 	lds	r24, 0x006A
 330:	82 30       	cpi	r24, 0x02	; 2
 332:	51 f0       	breq	.+20     	; 0x348 <USART_Init+0x26>
 334:	83 30       	cpi	r24, 0x03	; 3
 336:	31 f0       	breq	.+12     	; 0x344 <USART_Init+0x22>
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	11 f0       	breq	.+4      	; 0x340 <USART_Init+0x1e>


void USART_Init(void)
{
	unsigned char UCSRA_Temp=0;
	unsigned char UCSRB_Temp=0;
 33c:	c0 e0       	ldi	r28, 0x00	; 0
 33e:	05 c0       	rjmp	.+10     	; 0x34a <USART_Init+0x28>
		break;
		case USART_Rx_Only:
			 UCSRB_Temp |= (1<<RXEN);
		break;
		case USART_Tx_Only:
		     UCSRB_Temp |= (1<<TXEN);
 340:	c8 e0       	ldi	r28, 0x08	; 8
		break;
 342:	03 c0       	rjmp	.+6      	; 0x34a <USART_Init+0x28>
		case USART_Tx_Rx:
		     UCSRB_Temp |= (1<<RXEN) | (1<<TXEN);
 344:	c8 e1       	ldi	r28, 0x18	; 24
		break;
 346:	01 c0       	rjmp	.+2      	; 0x34a <USART_Init+0x28>
	switch(UART0.EnableMode)
	{
		case USART_Disable:
		break;
		case USART_Rx_Only:
			 UCSRB_Temp |= (1<<RXEN);
 348:	c0 e1       	ldi	r28, 0x10	; 16
		break;
		default:
		break;
	}
	
	switch (UART0.CommunicationMode)
 34a:	80 91 6b 00 	lds	r24, 0x006B
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	41 f1       	breq	.+80     	; 0x3a2 <USART_Init+0x80>
 352:	20 f0       	brcs	.+8      	; 0x35c <USART_Init+0x3a>
 354:	82 30       	cpi	r24, 0x02	; 2
 356:	09 f4       	brne	.+2      	; 0x35a <USART_Init+0x38>
 358:	47 c0       	rjmp	.+142    	; 0x3e8 <USART_Init+0xc6>
 35a:	6b c0       	rjmp	.+214    	; 0x432 <USART_Init+0x110>
	{
		case USART_Async_NormalSpeed:
		     UBRR_Temp = (((float)F_CPU) / (16.0 * UART0.BaudRate)) - 0.5;
 35c:	60 91 71 00 	lds	r22, 0x0071
 360:	70 91 72 00 	lds	r23, 0x0072
 364:	80 91 73 00 	lds	r24, 0x0073
 368:	90 91 74 00 	lds	r25, 0x0074
 36c:	0e 94 a9 03 	call	0x752	; 0x752 <__floatunsisf>
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	40 e8       	ldi	r20, 0x80	; 128
 376:	51 e4       	ldi	r21, 0x41	; 65
 378:	0e 94 37 04 	call	0x86e	; 0x86e <__mulsf3>
 37c:	9b 01       	movw	r18, r22
 37e:	ac 01       	movw	r20, r24
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	74 e2       	ldi	r23, 0x24	; 36
 384:	84 e7       	ldi	r24, 0x74	; 116
 386:	99 e4       	ldi	r25, 0x49	; 73
 388:	0e 94 15 03 	call	0x62a	; 0x62a <__divsf3>
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	40 e0       	ldi	r20, 0x00	; 0
 392:	5f e3       	ldi	r21, 0x3F	; 63
 394:	0e 94 b0 02 	call	0x560	; 0x560 <__subsf3>
 398:	6b 01       	movw	r12, r22
 39a:	7c 01       	movw	r14, r24

void USART_Init(void)
{
	unsigned char UCSRA_Temp=0;
	unsigned char UCSRB_Temp=0;
	unsigned char UCSRC_Temp=0;
 39c:	20 e0       	ldi	r18, 0x00	; 0
}


void USART_Init(void)
{
	unsigned char UCSRA_Temp=0;
 39e:	30 e0       	ldi	r19, 0x00	; 0
	
	switch (UART0.CommunicationMode)
	{
		case USART_Async_NormalSpeed:
		     UBRR_Temp = (((float)F_CPU) / (16.0 * UART0.BaudRate)) - 0.5;
		break;
 3a0:	50 c0       	rjmp	.+160    	; 0x442 <USART_Init+0x120>
		case USART_Async_DoubleSpeed:
			 UCSRA_Temp |= (1<<U2X);
			 UBRR_Temp = (((float)F_CPU) / (8.0 * UART0.BaudRate)) - 0.5;
 3a2:	60 91 71 00 	lds	r22, 0x0071
 3a6:	70 91 72 00 	lds	r23, 0x0072
 3aa:	80 91 73 00 	lds	r24, 0x0073
 3ae:	90 91 74 00 	lds	r25, 0x0074
 3b2:	0e 94 a9 03 	call	0x752	; 0x752 <__floatunsisf>
 3b6:	20 e0       	ldi	r18, 0x00	; 0
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	51 e4       	ldi	r21, 0x41	; 65
 3be:	0e 94 37 04 	call	0x86e	; 0x86e <__mulsf3>
 3c2:	9b 01       	movw	r18, r22
 3c4:	ac 01       	movw	r20, r24
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	74 e2       	ldi	r23, 0x24	; 36
 3ca:	84 e7       	ldi	r24, 0x74	; 116
 3cc:	99 e4       	ldi	r25, 0x49	; 73
 3ce:	0e 94 15 03 	call	0x62a	; 0x62a <__divsf3>
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	40 e0       	ldi	r20, 0x00	; 0
 3d8:	5f e3       	ldi	r21, 0x3F	; 63
 3da:	0e 94 b0 02 	call	0x560	; 0x560 <__subsf3>
 3de:	6b 01       	movw	r12, r22
 3e0:	7c 01       	movw	r14, r24

void USART_Init(void)
{
	unsigned char UCSRA_Temp=0;
	unsigned char UCSRB_Temp=0;
	unsigned char UCSRC_Temp=0;
 3e2:	20 e0       	ldi	r18, 0x00	; 0
	{
		case USART_Async_NormalSpeed:
		     UBRR_Temp = (((float)F_CPU) / (16.0 * UART0.BaudRate)) - 0.5;
		break;
		case USART_Async_DoubleSpeed:
			 UCSRA_Temp |= (1<<U2X);
 3e4:	32 e0       	ldi	r19, 0x02	; 2
			 UBRR_Temp = (((float)F_CPU) / (8.0 * UART0.BaudRate)) - 0.5;
		break;
 3e6:	2d c0       	rjmp	.+90     	; 0x442 <USART_Init+0x120>
		case USART_Sync:
		     UCSRC_Temp |= (1<<UMSEL);
			 UBRR_Temp = (((float)F_CPU) / (2.0 * UART0.BaudRate)) - 0.5;
 3e8:	60 91 71 00 	lds	r22, 0x0071
 3ec:	70 91 72 00 	lds	r23, 0x0072
 3f0:	80 91 73 00 	lds	r24, 0x0073
 3f4:	90 91 74 00 	lds	r25, 0x0074
 3f8:	0e 94 a9 03 	call	0x752	; 0x752 <__floatunsisf>
 3fc:	9b 01       	movw	r18, r22
 3fe:	ac 01       	movw	r20, r24
 400:	0e 94 b1 02 	call	0x562	; 0x562 <__addsf3>
 404:	9b 01       	movw	r18, r22
 406:	ac 01       	movw	r20, r24
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	74 e2       	ldi	r23, 0x24	; 36
 40c:	84 e7       	ldi	r24, 0x74	; 116
 40e:	99 e4       	ldi	r25, 0x49	; 73
 410:	0e 94 15 03 	call	0x62a	; 0x62a <__divsf3>
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	5f e3       	ldi	r21, 0x3F	; 63
 41c:	0e 94 b0 02 	call	0x560	; 0x560 <__subsf3>
 420:	6b 01       	movw	r12, r22
 422:	7c 01       	movw	r14, r24
			 switch (UART0.ClockPolarity)
 424:	80 91 70 00 	lds	r24, 0x0070
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	49 f0       	breq	.+18     	; 0x43e <USART_Init+0x11c>
		case USART_Async_DoubleSpeed:
			 UCSRA_Temp |= (1<<U2X);
			 UBRR_Temp = (((float)F_CPU) / (8.0 * UART0.BaudRate)) - 0.5;
		break;
		case USART_Sync:
		     UCSRC_Temp |= (1<<UMSEL);
 42c:	20 e4       	ldi	r18, 0x40	; 64
}


void USART_Init(void)
{
	unsigned char UCSRA_Temp=0;
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	08 c0       	rjmp	.+16     	; 0x442 <USART_Init+0x120>
	unsigned char UCSRB_Temp=0;
	unsigned char UCSRC_Temp=0;
	float UBRR_Temp=0;
 432:	c1 2c       	mov	r12, r1
 434:	d1 2c       	mov	r13, r1
 436:	76 01       	movw	r14, r12

void USART_Init(void)
{
	unsigned char UCSRA_Temp=0;
	unsigned char UCSRB_Temp=0;
	unsigned char UCSRC_Temp=0;
 438:	20 e0       	ldi	r18, 0x00	; 0
}


void USART_Init(void)
{
	unsigned char UCSRA_Temp=0;
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <USART_Init+0x120>
			 switch (UART0.ClockPolarity)
			 {
				 case USART_SampleOnFalling:
				 break;
				 case USART_SampleOnRising:
				  UCSRC_Temp |= (1<<UCPOL);
 43e:	21 e4       	ldi	r18, 0x41	; 65
}


void USART_Init(void)
{
	unsigned char UCSRA_Temp=0;
 440:	30 e0       	ldi	r19, 0x00	; 0
			 }
		break;
		default:
		break;
	}
	switch(UART0.CommunicationTerminal)
 442:	80 91 6c 00 	lds	r24, 0x006C
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	09 f4       	brne	.+2      	; 0x44c <USART_Init+0x12a>
	{
		case USART_SingleProcessor:
		break;
		case USART_MultiProcessor:
		     UCSRA_Temp |= (1<<MPCM);
 44a:	31 60       	ori	r19, 0x01	; 1
		break;
		default:
		break;
	}
	
	switch(UART0.InterruptSource)
 44c:	80 91 6d 00 	lds	r24, 0x006D
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	fc 01       	movw	r30, r24
 454:	31 97       	sbiw	r30, 0x01	; 1
 456:	e7 30       	cpi	r30, 0x07	; 7
 458:	f1 05       	cpc	r31, r1
 45a:	88 f4       	brcc	.+34     	; 0x47e <USART_Init+0x15c>
 45c:	e6 5d       	subi	r30, 0xD6	; 214
 45e:	ff 4f       	sbci	r31, 0xFF	; 255
 460:	0c 94 9a 04 	jmp	0x934	; 0x934 <__tablejump2__>
	{
		case USART_InterruptDisable:
		break;
		case USART_RxComp_Enable:
		     UCSRB_Temp |= (1<<RXCIE);
 464:	c0 68       	ori	r28, 0x80	; 128
		break;
 466:	0b c0       	rjmp	.+22     	; 0x47e <USART_Init+0x15c>
		case USART_TxComp_Enable:
		     UCSRB_Temp |= (1<<TXCIE);
 468:	c0 64       	ori	r28, 0x40	; 64
		break;
 46a:	09 c0       	rjmp	.+18     	; 0x47e <USART_Init+0x15c>
		case USART_UDREmpty_Enable:
		     UCSRB_Temp |= (1<<UDRE);
 46c:	c0 62       	ori	r28, 0x20	; 32
		break;
 46e:	07 c0       	rjmp	.+14     	; 0x47e <USART_Init+0x15c>
		case USART_RxComp_TxComp_Enable:
			UCSRB_Temp |= (1<<TXCIE) | (1<<RXCIE);
 470:	c0 6c       	ori	r28, 0xC0	; 192
		break;
 472:	05 c0       	rjmp	.+10     	; 0x47e <USART_Init+0x15c>
		case USART_RxComp_UDREmpty_Enable:
		    UCSRB_Temp |= (1<<UDRE) | (1<<RXCIE);
 474:	c0 6a       	ori	r28, 0xA0	; 160
		break;
 476:	03 c0       	rjmp	.+6      	; 0x47e <USART_Init+0x15c>
		case USART_TxComp_UDREmpty_Enable:
		    UCSRB_Temp |= (1<<UDRE) | (1<<TXCIE);
 478:	c0 66       	ori	r28, 0x60	; 96
		break;
 47a:	01 c0       	rjmp	.+2      	; 0x47e <USART_Init+0x15c>
		case USART_RxComp_TxComp_UDREmpty_Enable:
		    UCSRB_Temp |= (1<<UDRE) | (1<<TXCIE) | (1<<RXCIE);
 47c:	c0 6e       	ori	r28, 0xE0	; 224
		break;
		default:
		break;
	}
	
	switch(UART0.DataFrame)
 47e:	80 91 6e 00 	lds	r24, 0x006E
 482:	82 30       	cpi	r24, 0x02	; 2
 484:	59 f0       	breq	.+22     	; 0x49c <USART_Init+0x17a>
 486:	18 f4       	brcc	.+6      	; 0x48e <USART_Init+0x16c>
 488:	81 30       	cpi	r24, 0x01	; 1
 48a:	31 f0       	breq	.+12     	; 0x498 <USART_Init+0x176>
 48c:	0d c0       	rjmp	.+26     	; 0x4a8 <USART_Init+0x186>
 48e:	83 30       	cpi	r24, 0x03	; 3
 490:	39 f0       	breq	.+14     	; 0x4a0 <USART_Init+0x17e>
 492:	84 30       	cpi	r24, 0x04	; 4
 494:	39 f0       	breq	.+14     	; 0x4a4 <USART_Init+0x182>
 496:	08 c0       	rjmp	.+16     	; 0x4a8 <USART_Init+0x186>
	{
		case USART_5bitData:
		break;
		case USART_6bitData:
		     UCSRC_Temp |= (1<<UCSZ0);
 498:	22 60       	ori	r18, 0x02	; 2
		break;
 49a:	06 c0       	rjmp	.+12     	; 0x4a8 <USART_Init+0x186>
		case USART_7bitData:
		     UCSRC_Temp |= (1<<UCSZ1);
 49c:	24 60       	ori	r18, 0x04	; 4
		break;
 49e:	04 c0       	rjmp	.+8      	; 0x4a8 <USART_Init+0x186>
		case USART_8bitData:
		     UCSRC_Temp |= (1<<UCSZ0) | (1<<UCSZ1);
 4a0:	26 60       	ori	r18, 0x06	; 6
		break;
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <USART_Init+0x186>
		case USART_9bitData:
		     UCSRC_Temp |= (1<<UCSZ0) | (1<<UCSZ1);
 4a4:	26 60       	ori	r18, 0x06	; 6
			 UCSRB_Temp |= (1<<UCSZ2);
 4a6:	c4 60       	ori	r28, 0x04	; 4
		break;
		default:
		break;
	}
	
	switch (UART0.ControlFrame)
 4a8:	80 91 6f 00 	lds	r24, 0x006F
 4ac:	83 30       	cpi	r24, 0x03	; 3
 4ae:	79 f0       	breq	.+30     	; 0x4ce <USART_Init+0x1ac>
 4b0:	28 f4       	brcc	.+10     	; 0x4bc <USART_Init+0x19a>
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	41 f0       	breq	.+16     	; 0x4c6 <USART_Init+0x1a4>
 4b6:	82 30       	cpi	r24, 0x02	; 2
 4b8:	41 f0       	breq	.+16     	; 0x4ca <USART_Init+0x1a8>
 4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <USART_Init+0x1b6>
 4bc:	84 30       	cpi	r24, 0x04	; 4
 4be:	49 f0       	breq	.+18     	; 0x4d2 <USART_Init+0x1b0>
 4c0:	85 30       	cpi	r24, 0x05	; 5
 4c2:	49 f0       	breq	.+18     	; 0x4d6 <USART_Init+0x1b4>
 4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <USART_Init+0x1b6>
	{
		case USART_ParityDisable_1Stop:
		break;
		case USART_ParityDisable_2Stop:
			 UCSRC_Temp |= (1<<USBS);
 4c6:	28 60       	ori	r18, 0x08	; 8
		break;
 4c8:	07 c0       	rjmp	.+14     	; 0x4d8 <USART_Init+0x1b6>
		case USART_ParityEven_1Stop:
		     UCSRC_Temp |= (1<<UPM1);
 4ca:	20 62       	ori	r18, 0x20	; 32
		break;
 4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <USART_Init+0x1b6>
		case USART_ParityEven_2Stop:
		     UCSRC_Temp |= (1<<USBS) | (1<<UPM1);
 4ce:	28 62       	ori	r18, 0x28	; 40
		break;
 4d0:	03 c0       	rjmp	.+6      	; 0x4d8 <USART_Init+0x1b6>
		case USART_ParityOdd_1Stop:
		     UCSRC_Temp |= (1<<UPM0) | (1<<UPM1);
 4d2:	20 63       	ori	r18, 0x30	; 48
		break;
 4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <USART_Init+0x1b6>
		case USART_ParityOdd_2Stop:
		     UCSRC_Temp |= (1<<USBS) | (1<<UPM0) | (1<<UPM1);
 4d6:	28 63       	ori	r18, 0x38	; 56
		break;
	}
	
	
	UCSRA = UCSRA_Temp;
 4d8:	3b b9       	out	0x0b, r19	; 11
	UCSRC = UCSRC_Temp;
 4da:	20 bd       	out	0x20, r18	; 32
	UCSRB = UCSRB_Temp;
 4dc:	ca b9       	out	0x0a, r28	; 10
	UBRRH = ((unsigned short)UBRR_Temp)>>8;
 4de:	c7 01       	movw	r24, r14
 4e0:	b6 01       	movw	r22, r12
 4e2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fixunssfsi>
 4e6:	70 bd       	out	0x20, r23	; 32
	UBRRL = ((unsigned char)UBRR_Temp) & 0xFF;
 4e8:	c7 01       	movw	r24, r14
 4ea:	b6 01       	movw	r22, r12
 4ec:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fixunssfsi>
 4f0:	69 b9       	out	0x09, r22	; 9
	
}
 4f2:	cf 91       	pop	r28
 4f4:	ff 90       	pop	r15
 4f6:	ef 90       	pop	r14
 4f8:	df 90       	pop	r13
 4fa:	cf 90       	pop	r12
 4fc:	08 95       	ret

000004fe <USART_SendByte_Blocking>:


void USART_SendByte_Blocking(unsigned short Data)
{
	while((UCSRA & (1<<UDRE)) == 0){}
 4fe:	5d 9b       	sbis	0x0b, 5	; 11
 500:	fe cf       	rjmp	.-4      	; 0x4fe <USART_SendByte_Blocking>
	
	if (UART0.DataFrame == USART_9bitData)
 502:	20 91 6e 00 	lds	r18, 0x006E
 506:	24 30       	cpi	r18, 0x04	; 4
 508:	41 f4       	brne	.+16     	; 0x51a <USART_SendByte_Blocking+0x1c>
	{
		UCSRB = (UCSRB & 0xFE) | ((Data & (1<<8)) >> 8);
 50a:	4a b1       	in	r20, 0x0a	; 10
 50c:	4e 7f       	andi	r20, 0xFE	; 254
 50e:	9c 01       	movw	r18, r24
 510:	22 27       	eor	r18, r18
 512:	31 70       	andi	r19, 0x01	; 1
 514:	24 2f       	mov	r18, r20
 516:	23 2b       	or	r18, r19
 518:	2a b9       	out	0x0a, r18	; 10
	}
	UDR = (unsigned char) Data;
 51a:	8c b9       	out	0x0c, r24	; 12
 51c:	08 95       	ret

0000051e <main>:



int main(void)
{
	Mp3_Init();
 51e:	0e 94 9d 00 	call	0x13a	; 0x13a <Mp3_Init>
	Mp3_SelectVolume(30);
 522:	8e e1       	ldi	r24, 0x1E	; 30
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Mp3_SelectVolume>
 52a:	2f e9       	ldi	r18, 0x9F	; 159
 52c:	86 e8       	ldi	r24, 0x86	; 134
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	21 50       	subi	r18, 0x01	; 1
 532:	80 40       	sbci	r24, 0x00	; 0
 534:	90 40       	sbci	r25, 0x00	; 0
 536:	e1 f7       	brne	.-8      	; 0x530 <main+0x12>
 538:	00 c0       	rjmp	.+0      	; 0x53a <main+0x1c>
 53a:	00 00       	nop
	_delay_ms(500);
	Mp3_PlayTrack(2);
 53c:	82 e0       	ldi	r24, 0x02	; 2
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 ce 00 	call	0x19c	; 0x19c <Mp3_PlayTrack>
 544:	2f e7       	ldi	r18, 0x7F	; 127
 546:	84 e8       	ldi	r24, 0x84	; 132
 548:	9e e1       	ldi	r25, 0x1E	; 30
 54a:	21 50       	subi	r18, 0x01	; 1
 54c:	80 40       	sbci	r24, 0x00	; 0
 54e:	90 40       	sbci	r25, 0x00	; 0
 550:	e1 f7       	brne	.-8      	; 0x54a <main+0x2c>
 552:	00 c0       	rjmp	.+0      	; 0x554 <main+0x36>
 554:	00 00       	nop
	_delay_ms(10000);
	Mp3_PlayTrack(4);
 556:	84 e0       	ldi	r24, 0x04	; 4
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 ce 00 	call	0x19c	; 0x19c <Mp3_PlayTrack>
 55e:	ff cf       	rjmp	.-2      	; 0x55e <main+0x40>

00000560 <__subsf3>:
 560:	50 58       	subi	r21, 0x80	; 128

00000562 <__addsf3>:
 562:	bb 27       	eor	r27, r27
 564:	aa 27       	eor	r26, r26
 566:	0e d0       	rcall	.+28     	; 0x584 <__addsf3x>
 568:	48 c1       	rjmp	.+656    	; 0x7fa <__fp_round>
 56a:	39 d1       	rcall	.+626    	; 0x7de <__fp_pscA>
 56c:	30 f0       	brcs	.+12     	; 0x57a <__addsf3+0x18>
 56e:	3e d1       	rcall	.+636    	; 0x7ec <__fp_pscB>
 570:	20 f0       	brcs	.+8      	; 0x57a <__addsf3+0x18>
 572:	31 f4       	brne	.+12     	; 0x580 <__addsf3+0x1e>
 574:	9f 3f       	cpi	r25, 0xFF	; 255
 576:	11 f4       	brne	.+4      	; 0x57c <__addsf3+0x1a>
 578:	1e f4       	brtc	.+6      	; 0x580 <__addsf3+0x1e>
 57a:	2e c1       	rjmp	.+604    	; 0x7d8 <__fp_nan>
 57c:	0e f4       	brtc	.+2      	; 0x580 <__addsf3+0x1e>
 57e:	e0 95       	com	r30
 580:	e7 fb       	bst	r30, 7
 582:	24 c1       	rjmp	.+584    	; 0x7cc <__fp_inf>

00000584 <__addsf3x>:
 584:	e9 2f       	mov	r30, r25
 586:	4a d1       	rcall	.+660    	; 0x81c <__fp_split3>
 588:	80 f3       	brcs	.-32     	; 0x56a <__addsf3+0x8>
 58a:	ba 17       	cp	r27, r26
 58c:	62 07       	cpc	r22, r18
 58e:	73 07       	cpc	r23, r19
 590:	84 07       	cpc	r24, r20
 592:	95 07       	cpc	r25, r21
 594:	18 f0       	brcs	.+6      	; 0x59c <__addsf3x+0x18>
 596:	71 f4       	brne	.+28     	; 0x5b4 <__addsf3x+0x30>
 598:	9e f5       	brtc	.+102    	; 0x600 <__addsf3x+0x7c>
 59a:	62 c1       	rjmp	.+708    	; 0x860 <__fp_zero>
 59c:	0e f4       	brtc	.+2      	; 0x5a0 <__addsf3x+0x1c>
 59e:	e0 95       	com	r30
 5a0:	0b 2e       	mov	r0, r27
 5a2:	ba 2f       	mov	r27, r26
 5a4:	a0 2d       	mov	r26, r0
 5a6:	0b 01       	movw	r0, r22
 5a8:	b9 01       	movw	r22, r18
 5aa:	90 01       	movw	r18, r0
 5ac:	0c 01       	movw	r0, r24
 5ae:	ca 01       	movw	r24, r20
 5b0:	a0 01       	movw	r20, r0
 5b2:	11 24       	eor	r1, r1
 5b4:	ff 27       	eor	r31, r31
 5b6:	59 1b       	sub	r21, r25
 5b8:	99 f0       	breq	.+38     	; 0x5e0 <__addsf3x+0x5c>
 5ba:	59 3f       	cpi	r21, 0xF9	; 249
 5bc:	50 f4       	brcc	.+20     	; 0x5d2 <__addsf3x+0x4e>
 5be:	50 3e       	cpi	r21, 0xE0	; 224
 5c0:	68 f1       	brcs	.+90     	; 0x61c <__addsf3x+0x98>
 5c2:	1a 16       	cp	r1, r26
 5c4:	f0 40       	sbci	r31, 0x00	; 0
 5c6:	a2 2f       	mov	r26, r18
 5c8:	23 2f       	mov	r18, r19
 5ca:	34 2f       	mov	r19, r20
 5cc:	44 27       	eor	r20, r20
 5ce:	58 5f       	subi	r21, 0xF8	; 248
 5d0:	f3 cf       	rjmp	.-26     	; 0x5b8 <__addsf3x+0x34>
 5d2:	46 95       	lsr	r20
 5d4:	37 95       	ror	r19
 5d6:	27 95       	ror	r18
 5d8:	a7 95       	ror	r26
 5da:	f0 40       	sbci	r31, 0x00	; 0
 5dc:	53 95       	inc	r21
 5de:	c9 f7       	brne	.-14     	; 0x5d2 <__addsf3x+0x4e>
 5e0:	7e f4       	brtc	.+30     	; 0x600 <__addsf3x+0x7c>
 5e2:	1f 16       	cp	r1, r31
 5e4:	ba 0b       	sbc	r27, r26
 5e6:	62 0b       	sbc	r22, r18
 5e8:	73 0b       	sbc	r23, r19
 5ea:	84 0b       	sbc	r24, r20
 5ec:	ba f0       	brmi	.+46     	; 0x61c <__addsf3x+0x98>
 5ee:	91 50       	subi	r25, 0x01	; 1
 5f0:	a1 f0       	breq	.+40     	; 0x61a <__addsf3x+0x96>
 5f2:	ff 0f       	add	r31, r31
 5f4:	bb 1f       	adc	r27, r27
 5f6:	66 1f       	adc	r22, r22
 5f8:	77 1f       	adc	r23, r23
 5fa:	88 1f       	adc	r24, r24
 5fc:	c2 f7       	brpl	.-16     	; 0x5ee <__addsf3x+0x6a>
 5fe:	0e c0       	rjmp	.+28     	; 0x61c <__addsf3x+0x98>
 600:	ba 0f       	add	r27, r26
 602:	62 1f       	adc	r22, r18
 604:	73 1f       	adc	r23, r19
 606:	84 1f       	adc	r24, r20
 608:	48 f4       	brcc	.+18     	; 0x61c <__addsf3x+0x98>
 60a:	87 95       	ror	r24
 60c:	77 95       	ror	r23
 60e:	67 95       	ror	r22
 610:	b7 95       	ror	r27
 612:	f7 95       	ror	r31
 614:	9e 3f       	cpi	r25, 0xFE	; 254
 616:	08 f0       	brcs	.+2      	; 0x61a <__addsf3x+0x96>
 618:	b3 cf       	rjmp	.-154    	; 0x580 <__addsf3+0x1e>
 61a:	93 95       	inc	r25
 61c:	88 0f       	add	r24, r24
 61e:	08 f0       	brcs	.+2      	; 0x622 <__addsf3x+0x9e>
 620:	99 27       	eor	r25, r25
 622:	ee 0f       	add	r30, r30
 624:	97 95       	ror	r25
 626:	87 95       	ror	r24
 628:	08 95       	ret

0000062a <__divsf3>:
 62a:	0c d0       	rcall	.+24     	; 0x644 <__divsf3x>
 62c:	e6 c0       	rjmp	.+460    	; 0x7fa <__fp_round>
 62e:	de d0       	rcall	.+444    	; 0x7ec <__fp_pscB>
 630:	40 f0       	brcs	.+16     	; 0x642 <__divsf3+0x18>
 632:	d5 d0       	rcall	.+426    	; 0x7de <__fp_pscA>
 634:	30 f0       	brcs	.+12     	; 0x642 <__divsf3+0x18>
 636:	21 f4       	brne	.+8      	; 0x640 <__divsf3+0x16>
 638:	5f 3f       	cpi	r21, 0xFF	; 255
 63a:	19 f0       	breq	.+6      	; 0x642 <__divsf3+0x18>
 63c:	c7 c0       	rjmp	.+398    	; 0x7cc <__fp_inf>
 63e:	51 11       	cpse	r21, r1
 640:	10 c1       	rjmp	.+544    	; 0x862 <__fp_szero>
 642:	ca c0       	rjmp	.+404    	; 0x7d8 <__fp_nan>

00000644 <__divsf3x>:
 644:	eb d0       	rcall	.+470    	; 0x81c <__fp_split3>
 646:	98 f3       	brcs	.-26     	; 0x62e <__divsf3+0x4>

00000648 <__divsf3_pse>:
 648:	99 23       	and	r25, r25
 64a:	c9 f3       	breq	.-14     	; 0x63e <__divsf3+0x14>
 64c:	55 23       	and	r21, r21
 64e:	b1 f3       	breq	.-20     	; 0x63c <__divsf3+0x12>
 650:	95 1b       	sub	r25, r21
 652:	55 0b       	sbc	r21, r21
 654:	bb 27       	eor	r27, r27
 656:	aa 27       	eor	r26, r26
 658:	62 17       	cp	r22, r18
 65a:	73 07       	cpc	r23, r19
 65c:	84 07       	cpc	r24, r20
 65e:	38 f0       	brcs	.+14     	; 0x66e <__divsf3_pse+0x26>
 660:	9f 5f       	subi	r25, 0xFF	; 255
 662:	5f 4f       	sbci	r21, 0xFF	; 255
 664:	22 0f       	add	r18, r18
 666:	33 1f       	adc	r19, r19
 668:	44 1f       	adc	r20, r20
 66a:	aa 1f       	adc	r26, r26
 66c:	a9 f3       	breq	.-22     	; 0x658 <__divsf3_pse+0x10>
 66e:	33 d0       	rcall	.+102    	; 0x6d6 <__divsf3_pse+0x8e>
 670:	0e 2e       	mov	r0, r30
 672:	3a f0       	brmi	.+14     	; 0x682 <__divsf3_pse+0x3a>
 674:	e0 e8       	ldi	r30, 0x80	; 128
 676:	30 d0       	rcall	.+96     	; 0x6d8 <__divsf3_pse+0x90>
 678:	91 50       	subi	r25, 0x01	; 1
 67a:	50 40       	sbci	r21, 0x00	; 0
 67c:	e6 95       	lsr	r30
 67e:	00 1c       	adc	r0, r0
 680:	ca f7       	brpl	.-14     	; 0x674 <__divsf3_pse+0x2c>
 682:	29 d0       	rcall	.+82     	; 0x6d6 <__divsf3_pse+0x8e>
 684:	fe 2f       	mov	r31, r30
 686:	27 d0       	rcall	.+78     	; 0x6d6 <__divsf3_pse+0x8e>
 688:	66 0f       	add	r22, r22
 68a:	77 1f       	adc	r23, r23
 68c:	88 1f       	adc	r24, r24
 68e:	bb 1f       	adc	r27, r27
 690:	26 17       	cp	r18, r22
 692:	37 07       	cpc	r19, r23
 694:	48 07       	cpc	r20, r24
 696:	ab 07       	cpc	r26, r27
 698:	b0 e8       	ldi	r27, 0x80	; 128
 69a:	09 f0       	breq	.+2      	; 0x69e <__divsf3_pse+0x56>
 69c:	bb 0b       	sbc	r27, r27
 69e:	80 2d       	mov	r24, r0
 6a0:	bf 01       	movw	r22, r30
 6a2:	ff 27       	eor	r31, r31
 6a4:	93 58       	subi	r25, 0x83	; 131
 6a6:	5f 4f       	sbci	r21, 0xFF	; 255
 6a8:	2a f0       	brmi	.+10     	; 0x6b4 <__divsf3_pse+0x6c>
 6aa:	9e 3f       	cpi	r25, 0xFE	; 254
 6ac:	51 05       	cpc	r21, r1
 6ae:	68 f0       	brcs	.+26     	; 0x6ca <__divsf3_pse+0x82>
 6b0:	8d c0       	rjmp	.+282    	; 0x7cc <__fp_inf>
 6b2:	d7 c0       	rjmp	.+430    	; 0x862 <__fp_szero>
 6b4:	5f 3f       	cpi	r21, 0xFF	; 255
 6b6:	ec f3       	brlt	.-6      	; 0x6b2 <__divsf3_pse+0x6a>
 6b8:	98 3e       	cpi	r25, 0xE8	; 232
 6ba:	dc f3       	brlt	.-10     	; 0x6b2 <__divsf3_pse+0x6a>
 6bc:	86 95       	lsr	r24
 6be:	77 95       	ror	r23
 6c0:	67 95       	ror	r22
 6c2:	b7 95       	ror	r27
 6c4:	f7 95       	ror	r31
 6c6:	9f 5f       	subi	r25, 0xFF	; 255
 6c8:	c9 f7       	brne	.-14     	; 0x6bc <__divsf3_pse+0x74>
 6ca:	88 0f       	add	r24, r24
 6cc:	91 1d       	adc	r25, r1
 6ce:	96 95       	lsr	r25
 6d0:	87 95       	ror	r24
 6d2:	97 f9       	bld	r25, 7
 6d4:	08 95       	ret
 6d6:	e1 e0       	ldi	r30, 0x01	; 1
 6d8:	66 0f       	add	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	bb 1f       	adc	r27, r27
 6e0:	62 17       	cp	r22, r18
 6e2:	73 07       	cpc	r23, r19
 6e4:	84 07       	cpc	r24, r20
 6e6:	ba 07       	cpc	r27, r26
 6e8:	20 f0       	brcs	.+8      	; 0x6f2 <__divsf3_pse+0xaa>
 6ea:	62 1b       	sub	r22, r18
 6ec:	73 0b       	sbc	r23, r19
 6ee:	84 0b       	sbc	r24, r20
 6f0:	ba 0b       	sbc	r27, r26
 6f2:	ee 1f       	adc	r30, r30
 6f4:	88 f7       	brcc	.-30     	; 0x6d8 <__divsf3_pse+0x90>
 6f6:	e0 95       	com	r30
 6f8:	08 95       	ret

000006fa <__fixunssfsi>:
 6fa:	98 d0       	rcall	.+304    	; 0x82c <__fp_splitA>
 6fc:	88 f0       	brcs	.+34     	; 0x720 <__fixunssfsi+0x26>
 6fe:	9f 57       	subi	r25, 0x7F	; 127
 700:	90 f0       	brcs	.+36     	; 0x726 <__fixunssfsi+0x2c>
 702:	b9 2f       	mov	r27, r25
 704:	99 27       	eor	r25, r25
 706:	b7 51       	subi	r27, 0x17	; 23
 708:	a0 f0       	brcs	.+40     	; 0x732 <__fixunssfsi+0x38>
 70a:	d1 f0       	breq	.+52     	; 0x740 <__fixunssfsi+0x46>
 70c:	66 0f       	add	r22, r22
 70e:	77 1f       	adc	r23, r23
 710:	88 1f       	adc	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	1a f0       	brmi	.+6      	; 0x71c <__fixunssfsi+0x22>
 716:	ba 95       	dec	r27
 718:	c9 f7       	brne	.-14     	; 0x70c <__fixunssfsi+0x12>
 71a:	12 c0       	rjmp	.+36     	; 0x740 <__fixunssfsi+0x46>
 71c:	b1 30       	cpi	r27, 0x01	; 1
 71e:	81 f0       	breq	.+32     	; 0x740 <__fixunssfsi+0x46>
 720:	9f d0       	rcall	.+318    	; 0x860 <__fp_zero>
 722:	b1 e0       	ldi	r27, 0x01	; 1
 724:	08 95       	ret
 726:	9c c0       	rjmp	.+312    	; 0x860 <__fp_zero>
 728:	67 2f       	mov	r22, r23
 72a:	78 2f       	mov	r23, r24
 72c:	88 27       	eor	r24, r24
 72e:	b8 5f       	subi	r27, 0xF8	; 248
 730:	39 f0       	breq	.+14     	; 0x740 <__fixunssfsi+0x46>
 732:	b9 3f       	cpi	r27, 0xF9	; 249
 734:	cc f3       	brlt	.-14     	; 0x728 <__fixunssfsi+0x2e>
 736:	86 95       	lsr	r24
 738:	77 95       	ror	r23
 73a:	67 95       	ror	r22
 73c:	b3 95       	inc	r27
 73e:	d9 f7       	brne	.-10     	; 0x736 <__fixunssfsi+0x3c>
 740:	3e f4       	brtc	.+14     	; 0x750 <__fixunssfsi+0x56>
 742:	90 95       	com	r25
 744:	80 95       	com	r24
 746:	70 95       	com	r23
 748:	61 95       	neg	r22
 74a:	7f 4f       	sbci	r23, 0xFF	; 255
 74c:	8f 4f       	sbci	r24, 0xFF	; 255
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	08 95       	ret

00000752 <__floatunsisf>:
 752:	e8 94       	clt
 754:	09 c0       	rjmp	.+18     	; 0x768 <__floatsisf+0x12>

00000756 <__floatsisf>:
 756:	97 fb       	bst	r25, 7
 758:	3e f4       	brtc	.+14     	; 0x768 <__floatsisf+0x12>
 75a:	90 95       	com	r25
 75c:	80 95       	com	r24
 75e:	70 95       	com	r23
 760:	61 95       	neg	r22
 762:	7f 4f       	sbci	r23, 0xFF	; 255
 764:	8f 4f       	sbci	r24, 0xFF	; 255
 766:	9f 4f       	sbci	r25, 0xFF	; 255
 768:	99 23       	and	r25, r25
 76a:	a9 f0       	breq	.+42     	; 0x796 <__floatsisf+0x40>
 76c:	f9 2f       	mov	r31, r25
 76e:	96 e9       	ldi	r25, 0x96	; 150
 770:	bb 27       	eor	r27, r27
 772:	93 95       	inc	r25
 774:	f6 95       	lsr	r31
 776:	87 95       	ror	r24
 778:	77 95       	ror	r23
 77a:	67 95       	ror	r22
 77c:	b7 95       	ror	r27
 77e:	f1 11       	cpse	r31, r1
 780:	f8 cf       	rjmp	.-16     	; 0x772 <__floatsisf+0x1c>
 782:	fa f4       	brpl	.+62     	; 0x7c2 <__floatsisf+0x6c>
 784:	bb 0f       	add	r27, r27
 786:	11 f4       	brne	.+4      	; 0x78c <__floatsisf+0x36>
 788:	60 ff       	sbrs	r22, 0
 78a:	1b c0       	rjmp	.+54     	; 0x7c2 <__floatsisf+0x6c>
 78c:	6f 5f       	subi	r22, 0xFF	; 255
 78e:	7f 4f       	sbci	r23, 0xFF	; 255
 790:	8f 4f       	sbci	r24, 0xFF	; 255
 792:	9f 4f       	sbci	r25, 0xFF	; 255
 794:	16 c0       	rjmp	.+44     	; 0x7c2 <__floatsisf+0x6c>
 796:	88 23       	and	r24, r24
 798:	11 f0       	breq	.+4      	; 0x79e <__floatsisf+0x48>
 79a:	96 e9       	ldi	r25, 0x96	; 150
 79c:	11 c0       	rjmp	.+34     	; 0x7c0 <__floatsisf+0x6a>
 79e:	77 23       	and	r23, r23
 7a0:	21 f0       	breq	.+8      	; 0x7aa <__floatsisf+0x54>
 7a2:	9e e8       	ldi	r25, 0x8E	; 142
 7a4:	87 2f       	mov	r24, r23
 7a6:	76 2f       	mov	r23, r22
 7a8:	05 c0       	rjmp	.+10     	; 0x7b4 <__floatsisf+0x5e>
 7aa:	66 23       	and	r22, r22
 7ac:	71 f0       	breq	.+28     	; 0x7ca <__floatsisf+0x74>
 7ae:	96 e8       	ldi	r25, 0x86	; 134
 7b0:	86 2f       	mov	r24, r22
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	2a f0       	brmi	.+10     	; 0x7c2 <__floatsisf+0x6c>
 7b8:	9a 95       	dec	r25
 7ba:	66 0f       	add	r22, r22
 7bc:	77 1f       	adc	r23, r23
 7be:	88 1f       	adc	r24, r24
 7c0:	da f7       	brpl	.-10     	; 0x7b8 <__floatsisf+0x62>
 7c2:	88 0f       	add	r24, r24
 7c4:	96 95       	lsr	r25
 7c6:	87 95       	ror	r24
 7c8:	97 f9       	bld	r25, 7
 7ca:	08 95       	ret

000007cc <__fp_inf>:
 7cc:	97 f9       	bld	r25, 7
 7ce:	9f 67       	ori	r25, 0x7F	; 127
 7d0:	80 e8       	ldi	r24, 0x80	; 128
 7d2:	70 e0       	ldi	r23, 0x00	; 0
 7d4:	60 e0       	ldi	r22, 0x00	; 0
 7d6:	08 95       	ret

000007d8 <__fp_nan>:
 7d8:	9f ef       	ldi	r25, 0xFF	; 255
 7da:	80 ec       	ldi	r24, 0xC0	; 192
 7dc:	08 95       	ret

000007de <__fp_pscA>:
 7de:	00 24       	eor	r0, r0
 7e0:	0a 94       	dec	r0
 7e2:	16 16       	cp	r1, r22
 7e4:	17 06       	cpc	r1, r23
 7e6:	18 06       	cpc	r1, r24
 7e8:	09 06       	cpc	r0, r25
 7ea:	08 95       	ret

000007ec <__fp_pscB>:
 7ec:	00 24       	eor	r0, r0
 7ee:	0a 94       	dec	r0
 7f0:	12 16       	cp	r1, r18
 7f2:	13 06       	cpc	r1, r19
 7f4:	14 06       	cpc	r1, r20
 7f6:	05 06       	cpc	r0, r21
 7f8:	08 95       	ret

000007fa <__fp_round>:
 7fa:	09 2e       	mov	r0, r25
 7fc:	03 94       	inc	r0
 7fe:	00 0c       	add	r0, r0
 800:	11 f4       	brne	.+4      	; 0x806 <__fp_round+0xc>
 802:	88 23       	and	r24, r24
 804:	52 f0       	brmi	.+20     	; 0x81a <__fp_round+0x20>
 806:	bb 0f       	add	r27, r27
 808:	40 f4       	brcc	.+16     	; 0x81a <__fp_round+0x20>
 80a:	bf 2b       	or	r27, r31
 80c:	11 f4       	brne	.+4      	; 0x812 <__fp_round+0x18>
 80e:	60 ff       	sbrs	r22, 0
 810:	04 c0       	rjmp	.+8      	; 0x81a <__fp_round+0x20>
 812:	6f 5f       	subi	r22, 0xFF	; 255
 814:	7f 4f       	sbci	r23, 0xFF	; 255
 816:	8f 4f       	sbci	r24, 0xFF	; 255
 818:	9f 4f       	sbci	r25, 0xFF	; 255
 81a:	08 95       	ret

0000081c <__fp_split3>:
 81c:	57 fd       	sbrc	r21, 7
 81e:	90 58       	subi	r25, 0x80	; 128
 820:	44 0f       	add	r20, r20
 822:	55 1f       	adc	r21, r21
 824:	59 f0       	breq	.+22     	; 0x83c <__fp_splitA+0x10>
 826:	5f 3f       	cpi	r21, 0xFF	; 255
 828:	71 f0       	breq	.+28     	; 0x846 <__fp_splitA+0x1a>
 82a:	47 95       	ror	r20

0000082c <__fp_splitA>:
 82c:	88 0f       	add	r24, r24
 82e:	97 fb       	bst	r25, 7
 830:	99 1f       	adc	r25, r25
 832:	61 f0       	breq	.+24     	; 0x84c <__fp_splitA+0x20>
 834:	9f 3f       	cpi	r25, 0xFF	; 255
 836:	79 f0       	breq	.+30     	; 0x856 <__fp_splitA+0x2a>
 838:	87 95       	ror	r24
 83a:	08 95       	ret
 83c:	12 16       	cp	r1, r18
 83e:	13 06       	cpc	r1, r19
 840:	14 06       	cpc	r1, r20
 842:	55 1f       	adc	r21, r21
 844:	f2 cf       	rjmp	.-28     	; 0x82a <__fp_split3+0xe>
 846:	46 95       	lsr	r20
 848:	f1 df       	rcall	.-30     	; 0x82c <__fp_splitA>
 84a:	08 c0       	rjmp	.+16     	; 0x85c <__fp_splitA+0x30>
 84c:	16 16       	cp	r1, r22
 84e:	17 06       	cpc	r1, r23
 850:	18 06       	cpc	r1, r24
 852:	99 1f       	adc	r25, r25
 854:	f1 cf       	rjmp	.-30     	; 0x838 <__fp_splitA+0xc>
 856:	86 95       	lsr	r24
 858:	71 05       	cpc	r23, r1
 85a:	61 05       	cpc	r22, r1
 85c:	08 94       	sec
 85e:	08 95       	ret

00000860 <__fp_zero>:
 860:	e8 94       	clt

00000862 <__fp_szero>:
 862:	bb 27       	eor	r27, r27
 864:	66 27       	eor	r22, r22
 866:	77 27       	eor	r23, r23
 868:	cb 01       	movw	r24, r22
 86a:	97 f9       	bld	r25, 7
 86c:	08 95       	ret

0000086e <__mulsf3>:
 86e:	0b d0       	rcall	.+22     	; 0x886 <__mulsf3x>
 870:	c4 cf       	rjmp	.-120    	; 0x7fa <__fp_round>
 872:	b5 df       	rcall	.-150    	; 0x7de <__fp_pscA>
 874:	28 f0       	brcs	.+10     	; 0x880 <__mulsf3+0x12>
 876:	ba df       	rcall	.-140    	; 0x7ec <__fp_pscB>
 878:	18 f0       	brcs	.+6      	; 0x880 <__mulsf3+0x12>
 87a:	95 23       	and	r25, r21
 87c:	09 f0       	breq	.+2      	; 0x880 <__mulsf3+0x12>
 87e:	a6 cf       	rjmp	.-180    	; 0x7cc <__fp_inf>
 880:	ab cf       	rjmp	.-170    	; 0x7d8 <__fp_nan>
 882:	11 24       	eor	r1, r1
 884:	ee cf       	rjmp	.-36     	; 0x862 <__fp_szero>

00000886 <__mulsf3x>:
 886:	ca df       	rcall	.-108    	; 0x81c <__fp_split3>
 888:	a0 f3       	brcs	.-24     	; 0x872 <__mulsf3+0x4>

0000088a <__mulsf3_pse>:
 88a:	95 9f       	mul	r25, r21
 88c:	d1 f3       	breq	.-12     	; 0x882 <__mulsf3+0x14>
 88e:	95 0f       	add	r25, r21
 890:	50 e0       	ldi	r21, 0x00	; 0
 892:	55 1f       	adc	r21, r21
 894:	62 9f       	mul	r22, r18
 896:	f0 01       	movw	r30, r0
 898:	72 9f       	mul	r23, r18
 89a:	bb 27       	eor	r27, r27
 89c:	f0 0d       	add	r31, r0
 89e:	b1 1d       	adc	r27, r1
 8a0:	63 9f       	mul	r22, r19
 8a2:	aa 27       	eor	r26, r26
 8a4:	f0 0d       	add	r31, r0
 8a6:	b1 1d       	adc	r27, r1
 8a8:	aa 1f       	adc	r26, r26
 8aa:	64 9f       	mul	r22, r20
 8ac:	66 27       	eor	r22, r22
 8ae:	b0 0d       	add	r27, r0
 8b0:	a1 1d       	adc	r26, r1
 8b2:	66 1f       	adc	r22, r22
 8b4:	82 9f       	mul	r24, r18
 8b6:	22 27       	eor	r18, r18
 8b8:	b0 0d       	add	r27, r0
 8ba:	a1 1d       	adc	r26, r1
 8bc:	62 1f       	adc	r22, r18
 8be:	73 9f       	mul	r23, r19
 8c0:	b0 0d       	add	r27, r0
 8c2:	a1 1d       	adc	r26, r1
 8c4:	62 1f       	adc	r22, r18
 8c6:	83 9f       	mul	r24, r19
 8c8:	a0 0d       	add	r26, r0
 8ca:	61 1d       	adc	r22, r1
 8cc:	22 1f       	adc	r18, r18
 8ce:	74 9f       	mul	r23, r20
 8d0:	33 27       	eor	r19, r19
 8d2:	a0 0d       	add	r26, r0
 8d4:	61 1d       	adc	r22, r1
 8d6:	23 1f       	adc	r18, r19
 8d8:	84 9f       	mul	r24, r20
 8da:	60 0d       	add	r22, r0
 8dc:	21 1d       	adc	r18, r1
 8de:	82 2f       	mov	r24, r18
 8e0:	76 2f       	mov	r23, r22
 8e2:	6a 2f       	mov	r22, r26
 8e4:	11 24       	eor	r1, r1
 8e6:	9f 57       	subi	r25, 0x7F	; 127
 8e8:	50 40       	sbci	r21, 0x00	; 0
 8ea:	8a f0       	brmi	.+34     	; 0x90e <__mulsf3_pse+0x84>
 8ec:	e1 f0       	breq	.+56     	; 0x926 <__mulsf3_pse+0x9c>
 8ee:	88 23       	and	r24, r24
 8f0:	4a f0       	brmi	.+18     	; 0x904 <__mulsf3_pse+0x7a>
 8f2:	ee 0f       	add	r30, r30
 8f4:	ff 1f       	adc	r31, r31
 8f6:	bb 1f       	adc	r27, r27
 8f8:	66 1f       	adc	r22, r22
 8fa:	77 1f       	adc	r23, r23
 8fc:	88 1f       	adc	r24, r24
 8fe:	91 50       	subi	r25, 0x01	; 1
 900:	50 40       	sbci	r21, 0x00	; 0
 902:	a9 f7       	brne	.-22     	; 0x8ee <__mulsf3_pse+0x64>
 904:	9e 3f       	cpi	r25, 0xFE	; 254
 906:	51 05       	cpc	r21, r1
 908:	70 f0       	brcs	.+28     	; 0x926 <__mulsf3_pse+0x9c>
 90a:	60 cf       	rjmp	.-320    	; 0x7cc <__fp_inf>
 90c:	aa cf       	rjmp	.-172    	; 0x862 <__fp_szero>
 90e:	5f 3f       	cpi	r21, 0xFF	; 255
 910:	ec f3       	brlt	.-6      	; 0x90c <__mulsf3_pse+0x82>
 912:	98 3e       	cpi	r25, 0xE8	; 232
 914:	dc f3       	brlt	.-10     	; 0x90c <__mulsf3_pse+0x82>
 916:	86 95       	lsr	r24
 918:	77 95       	ror	r23
 91a:	67 95       	ror	r22
 91c:	b7 95       	ror	r27
 91e:	f7 95       	ror	r31
 920:	e7 95       	ror	r30
 922:	9f 5f       	subi	r25, 0xFF	; 255
 924:	c1 f7       	brne	.-16     	; 0x916 <__mulsf3_pse+0x8c>
 926:	fe 2b       	or	r31, r30
 928:	88 0f       	add	r24, r24
 92a:	91 1d       	adc	r25, r1
 92c:	96 95       	lsr	r25
 92e:	87 95       	ror	r24
 930:	97 f9       	bld	r25, 7
 932:	08 95       	ret

00000934 <__tablejump2__>:
 934:	ee 0f       	add	r30, r30
 936:	ff 1f       	adc	r31, r31

00000938 <__tablejump__>:
 938:	05 90       	lpm	r0, Z+
 93a:	f4 91       	lpm	r31, Z
 93c:	e0 2d       	mov	r30, r0
 93e:	09 94       	ijmp

00000940 <_exit>:
 940:	f8 94       	cli

00000942 <__stop_program>:
 942:	ff cf       	rjmp	.-2      	; 0x942 <__stop_program>
